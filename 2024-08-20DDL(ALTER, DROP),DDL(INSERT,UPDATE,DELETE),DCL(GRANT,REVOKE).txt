2024-08-20 STUDY
DML(INSERT,UPDATE,DELETE)

 < DML >
    DATA MANIPULATION LAGUAGE
    데이터 조작 언어
    
    테이블에 새로운 데이터를 삽입 (INSERT) 하거나,
    기존의 데이터를 수정 (UPDATE) 하거나,
    기존의 데이터를 삭제 (DELETE) 하는 구문
    
    => 데이터 조회용 구문인 SELECT 문도 DML임!!!
=> SELECT 문과의 차이점이라고 한다면
       SELECT 문은 100번, 1000번 실행하더라도 테이블 내용의 변화 X
       (단순 조회용이기 때문)
       INSERT, UPDATE, DELETE 구문은 1번만 실행해도
       테이블 내용의 변화 O
      EX) 실행후 CONSOLE 창에  1행이 삭제 수정 삽입... 이런 문구로 변화가 일어남


1. INSERT
    테이블에 새로운 "행" 을 추가하는 구문
    
    [ 표현법 ]
    1) INSERT INTO 테이블명 VALUES(값1, 값2, 값3, ....);
    => 해당 테이블의 모든 컬럼에 대해서 추가하고자 하는 값을
       내가 직접 제시해서 "한 행" 으로 INSERT 하고자 할 때 사용
       주의할점 : 컬럼 순번을 지켜서 VALUES 괄호 안에 값을 나열해야함!!
                 해당 테이블의 컬럼 갯수를 맞춰서 값을 나열해야함!!



--> DEFAULT 설정이 되어있는 컬럼에 기본값을 INSERT 하고싶다면
--INSERT 구문 안쪽에 해당 컬럼값 자리에 DFAULT 키워드를 쓰자

-- 주의사항 : 컬럼 갯수 정확하게 맞추기!!

--> 값을 적게 제시하면 SQL 오류: ORA-00947: not enough values

--> 값을 오버해서 제시하면 SQL 오류: ORA-00913: too many values

2) INSERT INTO 테이블명(컬럼명1, 컬럼명2, 컬럼명3)
                    VALUES(값1,값2,값3);

=> 해당 테이블에 특정 컬럼만 선택해서
     그 컬럼에 추가할 값만 제시하고자 할 때 사용
     그래도 한 행 단위로 추가되기 때문에
     선택이 안된 컬럼은 기본적으로 NULL 값이 들어감!!
     단, DEFAULT 이 지정되어있는 경우는 기본값이 들어감!!
     주의할점 : NOT NULL 제약조건이 걸려있는 컬럼은
       반드시 선택해서 직접 값을 제시해야함
                단, 아무리 NOT NULL 제약조건이 걸려있는
                컬럼이라고 해도 DEFAULT 설정이 되어있는 컬럼은
                선택 안해도 됨!!


 3) INSERT INTO 테이블명 (서브쿼리);
    => VALUES 로 값을 직접 기입하는것 대신에
       서브쿼리로 조회한 결과값을 "통째로" INSERT 하는 구문
       (여러행을 한번에 INSERT 시킬 수 있다)

 2. INSERT ALL
    
    
    한번에 두개 이상의 테이블에 각각 INSERT 할 때 사용
    그 때 사용되는 서브쿼리가 동일한 경우 사용한다!!

 1) INSERT ALL
       INTO 테이블명1 VALUES(컬럼명1, 컬럼명 2, ....)
       INTO 테이블명2 VALUES(컬럼명1, 컬럼명 2, ....)
       INTO 테이블명3 VALUES(컬럼명1, 컬럼명 2, ....)
       .
       .
       (서브쿼리); << ()가 필요하지는 않는데 가독성때문에 붙여줌
        
2) INSERT ALL
    WHEN 조건식 1 THEN
                 INTO 테이블명1 VALUES(컬럼명1,컬럼명2,....)
    WHEN 조건식 2 THEN
                 INTO 테이블명2 VALUES(컬럼명1,컬럼명2,....)
    (서브쿼리);

--> 항상 INSERT 구문 실행 성공 시
-- "N개 행 이(가) 삽입되었습니다." 문구가 나옴!!

 3. UPDATE
    테이블에 이미 기록된 기존의 데이터를 "수정" 하는 구문
    (테이블의 내용은 변화하지만 행의 갯수는 변하지 않음)
    
    [ 표현법 ]
    UPDATE 테이블명
        SET 컬럼명 = 바꿀값
          , 컬럼명 = 바꿀값
          , 컬럼명 = 바꿀값
          ..... => 여러개의 컬럼값 동시변경 가능
                 (=은 대입연산, ,로 나열해야함 AND 아님)
    WHERE 조건식;        => WHERE 절은 생략 가능 (가급적 생략안하는게 좋음)
                           WHERE 절을 생략 했을 경우
                           해당 테이블의 전체 행의 데이터가 다 변경됨!!

***예시*****
-- DEPT_COPY 테이블의 D9 부서의 부서명
-- '총무부' --> '전략기획팀' 으로 변경
UPDATE DEPT_COPY
SET DEPT_TITLE = '전략기획팀' -- 대입연산자
WHERE DEPT_ID = 'D9';-- 동등비교연산자

--> 실수라도 WHERE 절을 생략하게 되면
-- 해당 테이블의 전체 행에 대한 해당 컬럼값들이
-- 일괄적으로 모두 변경됨!! (신중하게 하자)

-- WHERE 절에 항상 TURE 인 조건식을 제시해도
-- 모든 행이 다 변경!!

--> 주로 UPDATE 시 한놈만 정확하게 바꾸려면
-- WHERE 절에 PRIMARY KEY 에 대한 조건을 제시하는 것이 확실하다


* UPDATE 문 안에서도 서브쿼리를 이용 가능하다.
    
    UPDATE 테이블명
       SET 컬럼명 = (서브쿼리)
    WHERE 조건식;

 4. DELETE
    테이블에 기록된 기존의 데이터를 "삭제" 하는 구문
    
    [ 표현법 ]
    DELETE 
     FROM 테이블명
     WHERE 조건식; => WHERE 절은 생략 가능
                     단, 생략 시 해당 테이블의 모든 행이 다 지워짐
                     
UPDATE, DELETE 구문은 WHERE 절을 어떻게 작성하냐에 따라
-- 처리되는 행의 갯수가 매번 다르게 나옴!!

--> SELECT 문의 실행 결과 : RESULT SET
--> INSERT / UPDATE / DELETE 문의 실행 결과 :
-- : 각각 추가 / 수정 / 삭제된 행의 갯수가 "정수" 로 나옴

* TRUNCATE 
    
    
    테이블의 "전체 행" 을 삭제할 때 쓸 수 있는 구문 (절삭, 잘라내다)
    WHERE 절을 통해 별도의 조건식 제시 불가,
    DELETE 보다 수행속도도 빠름
    ROLLBACK 이 불가함!! (DDL 로 분류)
    
    [ 표현법 ]
    TRUNCATE TABLE 테이블명;   |  DELETE FROM 테이블명;
    ---------------------------------------------------
    별도의 조건 제시 불가        |  별도의 조건 제시가능
    수행속도 빠름               |  수행속도 느림
    ROLLBACK 불가              |   ROLLBACK 가능

결과 문구 :--> 테이블이 잘렷습니다.



 < DDL >
    DATA DEFINTION LANGUAGE
    데이터 정의 언어
    
    객체들은 새로이 생성 (CREATE), 수정 (ALTER), 삭제(DROP)
    하는 구문들
    
    => UPDATE : 데이터 "내용" 을 수정
       DELETE : 데이터 "내용" 을 삭제
    => ALTER : 테이블 "구조" 를 수정
       DROP : 테이블 "구조" 를 삭제


 1. ALTER
    객체 구조를 수정하는 구문
    
    < 테이블 수정 >
    ALTER TABLE 테이블명 수정할내용;
    
    - 수정할내용
    1) 컬럼 추가 / 수정 / 삭제 
    2) 제약조건 추가 / 삭제  => 수정은 불가
                             수정하고자 한다면 삭제 후 새로이 추가
    3) 테이블명 / 컬럼명 / 제약조건명 변경

1) 컬럼 추가 / 수정 / 삭제
-- 1_1) 컬럼 추가 (ADD) 
-- ADD 추가할컬럼명 데이터 타입 DEFAULT 기본값
-- => DEFAULT 기본값은 생략 가능
 1_2) 컬럼 수정 (MODIFY)
-- 데이터타입 수정 : MODIFY 수정할컬럼명 바꿀데이터타입
-- DEFAULT 값 수정 : MODIFY 수정할컬럼명 DEFAULT 바꾸고자하는기본값

*****자료형 변경 시 주의사항*******
-- 현재 변경하고자 하는 컬럼에 이미 담겨있는 값과
-- 완전 다른 타입으로는 변경 불가하다!!
-- 예) 문자 -> 숫자 (X) / 문자열의 사이즈 축소 (X)
--   문자열 사이즈 확대 (O)

 2_1) 제약조건 추가 (ADD)
    
    - PRIMARY KEY :
        ADD PRIMARY KEY(컬럼명)
    - FOREIGN KEY :
        ADD FOREIGN KEY(컬럼명) REFERENCES 참조할테이블명(참조할컬럼명)
    - UNIQUE :
        ADD UNIQUE(컬럼명)
    - CHECK :
        ADD CHECK(컬럼에대한조건식)
    - NOT NULL : 
        MODIFY 컬럼명 NOT NULL;

=> 나만의 제약조건명을 부여하고자 한다면
       제약조건 앞에 CONSTRAINT 제약조건명을 기술하면 됨!!
    => 현재 계정 내에 있는 고유한 제약조건명으로 기술해야함!!
    => 이미 해당 컬럼에 들어있는 값에 대해서 알맞는 제약조건으로
       추가해야 함!!

-- 주의사항
-- 제약조건명은 한 계정 내에서 중복 불가!!
--> 아무리 다른 테이블이더라도 안됨!!        
-- 이미 해당 컬럼에 들어있는 값 기준으로 제약조건을 추가해야함

 2_2) 제약조건 삭제 (DROP CONSTRAINT)
    
    PRIMARY KEY, FOREIGN KEY, UNIQUE, CHECK :
    DROP CONSTRAINT 제약조건명
    
    - NOT NULL :
    MODIFY 컬럼명 NULL 
-- 주의사항
--> 한 테이블 내에서는 중복된 컬럼명으로 수정 불가!!

 2. DROP 
    
    객체를 삭제하는 구문
    
    - 테이블을 삭제하고 싶다면?
    DROP TABLE 테이블명;
    
    - 계정을 삭제하고 싶다면?
    DROP USER 계정명;
    

-- DELETE FROM 테이블명; 과의 차이점
--> 테이블 구조는 내비 두고 안의 데이터만 날려버리겠다.
-- SELECT 문으로 조회 가능 (단, 공집합으로 나옴)
--> 테이블 구조 자체를 날려버리겠다.
-- SELECT 문으로 조회 불가 (TABLE OR VIEW DOES NOT EXIST)

-- DROP TABLE 시 주의사항
-- 어딘가에서 참조되고있는 "부모테이블"은 삭제되지 않는다.
-- 만약에 삭제하고 싶다면
-- 1. 자식테이블을 먼저 삭제한 후 부모테이블을 삭제하는 방법
-- DROP TABLE 자식테이블명;
-- DROP TABLE 부모테이블명;

--> 참고)
-- 항상 CREATE 시에는 부모테이블을 먼저 생성해야함!!

-- 2. 부모테이블만 삭제하되, 맞물려있는 제약조건을 같이 삭제하는 방법
-- (자식테이블 및 데이터는 살아있을것)
-- DROP TABLE 부모테이블명 CASCADE CONSTRAINT;


  < DCL >
    
    DATA CONTROL LANGUAGE
    데이터 제어 언어
    
    
    계정에서 시스템 권한 또는 객체 접근권한을
    부여 (GRANT) 하거나 회수 (REVOKE) 하는 언어
    
    
    => 데이터 변경 내용을 픽스해주는 COMMIT,
       데이터 변경 내용을 복구해주는 ROLLBACK 또한 DCL 로 분류됨
       하지만 TCL (TRANSACTION CONTROL LANGUAGE)
       로 따로 분류하기도 함!!
       
    * 권한 부여 (GRANT)
    - 시스템권한 : 특정 DB에 접근하는 권한, 객체들을 생성할 수 있는 권한
    - 객체접근권한 : 특정 객체들에 접근해서 '조작' 할 수 있는 권한
    
    * 시스템권한
    특정 DB에 접근하는 권한, 객체들을 생성할 수 있는 권한
    
    [ 표현법 ]
    GRANT 권한명1, 권한명2, ... TO 계정명;
    
    - 시스템권한의 종류
    CREATE SESSTION : 계정에 접속할 수 있는 권한
    CREATE TABLE : 테이블을 생성할 수 있는 권한
    CREATE VIEW : 뷰를 생성할 수 있는 권한
    CREATE SEQUENCE : 시퀀스를 생성할 수있는 권한
    CREATE USER : 계정을 생성할 수 있는 권한

 * 객체접근권한 (객체권한)
    
    특정 객체들을 조작할 수 있는 권한
    (즉, DML 구문들을 실행할 수 있는 권한)
    SELECT, INSERT, UPDATE, DELETE 가 가능해짐
    
    [ 표현법 ]
    GRANT 권한종류 ON 특정객체 TO 계정명;
    
    권한종류     |   특정객체
    -----------------------------------
    SELECT      | TABLE, VIEW, SEQUENCE
    INSERT      | TABLE, VIEW
    UPDATE      | TABLE, VIEW
    DELETE      | TABLE, VIEW
    
    예) 특정 XXX 테이블에 SELECT 할 수 있는 권한만 부여
    GRANT SELECT ON 테이블명 TO 계정명;

 < 롤 ROLE >
    
    "특정 권한들" 을 하나의 "집합" 으로 묶어놓은 것
    
    CONNECT : CREATE SESSION 
                (데이터베이스에 접속할 수 있는 권한)
    RESOURCE : CREATE TABLE, CREATE SEQUENCE, ..
                (특정 객체들을 생성 및 관리할 수 있는 권한)

* 권한 회수 (REVOKE)
    
    권한을 회수할 때 (뺏을 때) 사용하는 명령어
    
    [ 표현법 ]
    
    REVOKE 권한명1, 권한명2, ... FROM 계정명;
    